// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  passwordHash    String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  readingProgress ReadingProgress[]
  highlights      Highlight[]
}

model Book {
  id              Int                @id @default(autoincrement())
  uuid            String             @unique @default(uuid())
  title           String
  author          String
  createdAt       DateTime           @default(now())
  files           BookFile[]
  readingProgress ReadingProgress[]
  highlights      Highlight[]
}

model BookFile {
  id                Int      @id @default(autoincrement())
  bookId            Int
  format            String   // e.g., "epub"
  r2_path           String   @unique
  original_filename String
  createdAt         DateTime @default(now())
  book              Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model ReadingProgress {
  id                  Int      @id @default(autoincrement())
  userId              Int
  bookId              Int
  current_cfi         String
  progress_percentage Float    @default(0)
  last_read_at        DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book                Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Highlight {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  cfi_range String
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId, cfi_range])
}